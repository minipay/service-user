// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "cleanbase/app/user/models"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FetchUser provides a mock function with given fields: c, _a1
func (_m *Repository) FetchUser(c context.Context, _a1 int64) (*models.User, error) {
	ret := _m.Called(c, _a1)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.User); ok {
		r0 = rf(c, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(c, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUsers provides a mock function with given fields: c, cursor, num
func (_m *Repository) FetchUsers(c context.Context, cursor string, num int64) ([]*models.User, string, error) {
	select {
	case <-time.After(30 * time.Second):
		c.Response().Header().Set(`X-Cursor`, "a")
		return c.JSON(http.StatusOK, "Request process")
	case <-c.Done():
		fmt.Fprint(os.Stderr, "request cancelled \n")
	}
	ret := _m.Called(c, cursor, num)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) []*models.User); ok {
		r0 = rf(c, cursor, num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) string); ok {
		r1 = rf(c, cursor, num)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int64) error); ok {
		r2 = rf(c, cursor, num)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Store provides a mock function with given fields: c, post
func (_m *Repository) Store(c context.Context, post *models.User) error {
	ret := _m.Called(c, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(c, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
